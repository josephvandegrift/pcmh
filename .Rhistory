!is.na(crosswalk$x_min) &
!is.na(crosswalk$x_max) &
!is.na(crosswalk$y) &
!is.na(crosswalk$y_min) &
!is.na(crosswalk$y_max)
),]
# Read in/clean metric data
metric_data <-
pcmh::import_metric_data(.metric_data_dir,
.metric_data_regexp,
col_types = c(.default = "c"))
# Read in PCMH reports
future::plan(future::multisession)
reports <-
pcmh::import_pdf_data(.pcmh_report_dir,
regexp = ".pdf$")
# Generate Detail
detail <-
furrr::future_map_dfr(reports,
~ {
report <- .x
furrr::future_map_dfr(1:nrow(crosswalk),
~ pcmh::generate_detail(report,
metric_data,
crosswalk[., ]))
})
# Generate Summary
summary <-
furrr::future_map_dfr(detail$prvdr_num |>
unique(),
~ pcmh::generate_summary(detail, .))
# Filter summary/detail to only missing/mismatches
out <-
list(Summary =
summary[which(summary$mismatch_typ != "Match"), ],
Detail =
detail[which(detail["mismatch_type"] %in% c("Missing", "Mismatch")), ])
# Rename output column names
names(out[[1]]) <-
c("Provider Number",
"Mismatch Type")
names(out[[2]]) <-
c("Provider Number",
"Report Section",
"Metric Description",
"Variable",
"Page Number",
"Report Value",
"Data Value",
"Mismatch Type")
# Return output
return(out)
}
tictoc::tic()
test_fun(
"U:/AR_reports/PCMH/Q32021_PCMH_2021_09072021_FINAL/Original",
data_path,
"report_pcmh_2021q3_21",
"pcmh21"
)
tictoc::toc()
?stop
pcmh::get_ext(test.csv)
pcmh::get_ext('test.csv')
test_fun <- function(.pcmh_report_dir,
.metric_data_dir,
.metric_data_regexp,
.report_type,
.out_path = NA) {
# If .out_path supplied, get file extension
if (!is.na(.out_path)) {
out_ext <-
pcmh::get_ext(.oup_path)
}
# Check that out_ext is .xlsx
if (out_ext != "xlsx") {
stop(".out_path only supports .xlsx documents")
}
# Initialize crosswalks
crosswalk <-
list(
pcmh20 = pcmh:::pcmh20_crosswalk,
pool20 = pcmh:::pool20_crosswalk,
pcmh21 = pcmh:::pcmh21_crosswalk
)
# Select crosswalk based on .report_type
crosswalk <-
crosswalk[[eval(.report_type)]]
# Remove metrics that don't have a variable/coordinates
crosswalk <-
crosswalk[which(
!is.na(crosswalk$variable) &
!is.na(crosswalk$x) &
!is.na(crosswalk$x_min) &
!is.na(crosswalk$x_max) &
!is.na(crosswalk$y) &
!is.na(crosswalk$y_min) &
!is.na(crosswalk$y_max)
),]
# Read in/clean metric data
metric_data <-
pcmh::import_metric_data(.metric_data_dir,
.metric_data_regexp,
col_types = c(.default = "c"))
# Read in PCMH reports
future::plan(future::multisession)
reports <-
pcmh::import_pdf_data(.pcmh_report_dir,
regexp = ".pdf$")
# Generate Detail
detail <-
furrr::future_map_dfr(reports,
~ {
report <- .x
furrr::future_map_dfr(1:nrow(crosswalk),
~ pcmh::generate_detail(report,
metric_data,
crosswalk[., ]))
})
# Generate Summary
summary <-
furrr::future_map_dfr(detail$prvdr_num |>
unique(),
~ pcmh::generate_summary(detail, .))
# Filter summary/detail to only missing/mismatches
out <-
list(Summary =
summary[which(summary$mismatch_typ != "Match"), ],
Detail =
detail[which(detail["mismatch_type"] %in% c("Missing", "Mismatch")), ])
# Rename output column names
names(out[[1]]) <-
c("Provider Number",
"Mismatch Type")
names(out[[2]]) <-
c(
"Provider Number",
"Report Section",
"Metric Description",
"Variable",
"Page Number",
"Report Value",
"Data Value",
"Mismatch Type"
)
# Save output to file if applicable
openxlsx::write.xlsx(out,
.out_path)
# Return output
return(out)
}
tictoc::tic()
test_fun(
"U:/AR_reports/PCMH/Q32021_PCMH_2021_09072021_FINAL/Original",
data_path,
"report_pcmh_2021q3_21",
"pcmh21",
"test.csv"
)
tictoc::toc()
test_fun <- function(.pcmh_report_dir,
.metric_data_dir,
.metric_data_regexp,
.report_type,
.out_path = NA) {
# If .out_path supplied, get file extension
if (!is.na(.out_path)) {
out_ext <-
pcmh::get_ext(.out_path)
}
# Check that out_ext is .xlsx
if (out_ext != "xlsx") {
stop(".out_path only supports .xlsx documents")
}
# Initialize crosswalks
crosswalk <-
list(
pcmh20 = pcmh:::pcmh20_crosswalk,
pool20 = pcmh:::pool20_crosswalk,
pcmh21 = pcmh:::pcmh21_crosswalk
)
# Select crosswalk based on .report_type
crosswalk <-
crosswalk[[eval(.report_type)]]
# Remove metrics that don't have a variable/coordinates
crosswalk <-
crosswalk[which(
!is.na(crosswalk$variable) &
!is.na(crosswalk$x) &
!is.na(crosswalk$x_min) &
!is.na(crosswalk$x_max) &
!is.na(crosswalk$y) &
!is.na(crosswalk$y_min) &
!is.na(crosswalk$y_max)
),]
# Read in/clean metric data
metric_data <-
pcmh::import_metric_data(.metric_data_dir,
.metric_data_regexp,
col_types = c(.default = "c"))
# Read in PCMH reports
future::plan(future::multisession)
reports <-
pcmh::import_pdf_data(.pcmh_report_dir,
regexp = ".pdf$")
# Generate Detail
detail <-
furrr::future_map_dfr(reports,
~ {
report <- .x
furrr::future_map_dfr(1:nrow(crosswalk),
~ pcmh::generate_detail(report,
metric_data,
crosswalk[., ]))
})
# Generate Summary
summary <-
furrr::future_map_dfr(detail$prvdr_num |>
unique(),
~ pcmh::generate_summary(detail, .))
# Filter summary/detail to only missing/mismatches
out <-
list(Summary =
summary[which(summary$mismatch_typ != "Match"), ],
Detail =
detail[which(detail["mismatch_type"] %in% c("Missing", "Mismatch")), ])
# Rename output column names
names(out[[1]]) <-
c("Provider Number",
"Mismatch Type")
names(out[[2]]) <-
c(
"Provider Number",
"Report Section",
"Metric Description",
"Variable",
"Page Number",
"Report Value",
"Data Value",
"Mismatch Type"
)
# Save output to file if applicable
openxlsx::write.xlsx(out,
.out_path)
# Return output
return(out)
}
tictoc::tic()
test_fun(
"U:/AR_reports/PCMH/Q32021_PCMH_2021_09072021_FINAL/Original",
data_path,
"report_pcmh_2021q3_21",
"pcmh21",
"test.csv"
)
tictoc::toc()
tictoc::tic()
test_fun(
"U:/AR_reports/PCMH/Q32021_PCMH_2021_09072021_FINAL/Original",
data_path,
"report_pcmh_2021q3_21",
"pcmh21",
"H:/test.xlsx"
)
tictoc::toc()
tictoc::tic()
test_fun(
"U:/AR_reports/PCMH/Q32021_PCMH_2020_09022021_FINAL/Original",
data_path,
"report_pcmh_2021q3_20",
"pcmh21",
"H:/test.xlsx"
)
tictoc::toc()
tictoc::tic()
test_fun(
"U:/AR_reports/PCMH/Q32021_PCMH_2020_09022021_FINAL/Original",
data_path,
"report_pcmh_2021q3_20",
"pcmh20",
"H:/test.xlsx"
)
tictoc::toc()
library(pcmh)
tictoc::tic()
pcmh::pcmh_qa(
"U:/AR_reports/PCMH/Q32021_PCMH_2020_09032021_SS_FINAL/Original",
data_path,
"report_pool_2021q3_20",
"pool20",
"H:/test2.xlsx"
)
tictoc::toc()
tictoc::tic()
pcmh::pcmh_qa(
"U:/AR_reports/PCMH/Q32021_PCMH_2021_09022021_FINAL/Original",
data_path,
"report_pcmh_2021q3_20",
"pchm20",
"H:/test2.xlsx"
)
tictoc::toc()
tictoc::tic()
pcmh::pcmh_qa(
"U:/AR_reports/PCMH/Q32021_PCMH_2020_09022021_FINAL/Original",
data_path,
"report_pcmh_2021q3_20",
"pchm20",
"H:/test2.xlsx"
)
tictoc::toc()
library(pcmh)
tictoc::tic()
pcmh::pcmh_qa(
"U:/AR_reports/PCMH/Q32021_PCMH_2020_09022021_FINAL/Original",
data_path,
"report_pcmh_2021q3_20",
"pchm20",
"H:/test2.xlsx"
)
tictoc::toc()
tictoc::tic()
pcmh::pcmh_qa(
"U:/AR_reports/PCMH/Q32021_PCMH_2020_09022021_FINAL/Original",
data_path,
"report_pcmh_2021q3_20",
"pcmh20",
"H:/test2.xlsx"
)
tictoc::toc()
library(pcmh)
tictoc::tic()
pcmh::pcmh_qa(
"U:/AR_reports/PCMH/Q32021_PCMH_2020_09022021_FINAL/Original",
data_path,
"report_pcmh_2021q3_20",
"pcmh20",
"H:/test.xlsx"
)
tictoc::toc()
data_path <-
"U:/AHCPII/Episodes of Care/Qrtly Reports/SAS team QA/Individual folders/Joseph/projects/pcmh_qa/data"
tictoc::tic()
pcmh::pcmh_qa(
"U:/AR_reports/PCMH/Q32021_PCMH_2020_09022021_FINAL/Original",
data_path,
"report_pcmh_2021q3_20",
"pcmh20",
"H:/test.xlsx"
)
tictoc::toc()
tictoc::tic()
pcmh::pcmh_qa(
"U:/AR_reports/PCMH/Q32021_PCMH_2021_09072021_FINAL/Original",
data_path,
"report_pcmh_2021q3_21",
"pcmh21",
"H:/test2.xlsx"
)
tictoc::toc()
tictoc::tic()
pcmh::pcmh_qa(
"U:/AR_reports/PCMH/Q32021_PCMH_2021_09032021_SS_FINAL/Original",
data_path,
"report_pool_2021q3_20",
"pool20",
"H:/test3.xlsx"
)
tictoc::toc()
tictoc::tic()
pcmh::pcmh_qa(
"U:/AR_reports/PCMH/Q32021_PCMH_2020_09032021_SS_FINAL/Original",
data_path,
"report_pool_2021q3_20",
"pool20",
"H:/test3.xlsx"
)
tictoc::toc()
debug(devtools::check)
devtools::check()
library(pcmh)
future::plan(future::multisession)
reports <-
pcmh::import_pdf_data("U:/AR_reports/PCMH/Q32021_PCMH_2021_09072021_FINAL",
regexp = ".pdf")
stop("Everything works up to here")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(pcmh)
dplyr::glimpse(pcmh:::pcmh20_crosswalk)
crosswalk <-
pcmh:::pcmh21_crosswalk[which(!is.na(pcmh:::pcmh21_crosswalk$variable) &
!is.na(pcmh:::pcmh21_crosswalk$x) &
!is.na(pcmh:::pcmh21_crosswalk$x_min) &
!is.na(pcmh:::pcmh21_crosswalk$x_max) &
!is.na(pcmh:::pcmh21_crosswalk$y) &
!is.na(pcmh:::pcmh21_crosswalk$y_min) &
!is.na(pcmh:::pcmh21_crosswalk$y_max)), ]
metric_data <-
pcmh::import_metric_data(
"U:/AHCPII/Episodes of Care/Qrtly Reports/SAS team QA/Individual folders/Joseph/projects/pcmh_qa/data",
.regexp = "report_pcmh_2021q3_21",
col_types = c(.default = "c")
)
head(metric_data)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(pcmh)
dplyr::glimpse(pcmh:::pcmh20_crosswalk)
crosswalk <-
pcmh:::pcmh21_crosswalk[which(!is.na(pcmh:::pcmh21_crosswalk$variable) &
!is.na(pcmh:::pcmh21_crosswalk$x) &
!is.na(pcmh:::pcmh21_crosswalk$x_min) &
!is.na(pcmh:::pcmh21_crosswalk$x_max) &
!is.na(pcmh:::pcmh21_crosswalk$y) &
!is.na(pcmh:::pcmh21_crosswalk$y_min) &
!is.na(pcmh:::pcmh21_crosswalk$y_max)), ]
metric_data <-
pcmh::import_metric_data(
"U:/AHCPII/Episodes of Care/Qrtly Reports/SAS team QA/Individual folders/Joseph/projects/pcmh_qa/data",
.regexp = "report_pcmh_2021q3_21",
col_types = c(.default = "c")
)
head(metric_data)
usethis::use_package("future")
library(pcmh)
pcmh20_crosswalk
library(pcmh)
library(pcmh)
detail <-
furrr::future_map_dfr(reports,
~ {
report <- .x
furrr::future_map_dfr(
1:nrow(crosswalk),
~ pcmh::generate_detail(report,
metric_data,
crosswalk[.,])
)
})
library(pcmh)
metric_data <-
pcmh::import_metric_data(
"U:/AHCPII/Episodes of Care/Qrtly Reports/SAS team QA/Individual folders/Joseph/projects/pcmh_qa/data",
.regexp = "report_pcmh_2021q3_21",
col_types = c(.default = "c")
)
crosswalk <-
pcmh:::pcmh21_crosswalk[which(!is.na(pcmh:::pcmh21_crosswalk$variable) &
!is.na(pcmh:::pcmh21_crosswalk$x) &
!is.na(pcmh:::pcmh21_crosswalk$x_min) &
!is.na(pcmh:::pcmh21_crosswalk$x_max) &
!is.na(pcmh:::pcmh21_crosswalk$y) &
!is.na(pcmh:::pcmh21_crosswalk$y_min) &
!is.na(pcmh:::pcmh21_crosswalk$y_max)), ]
future::plan(future::multisession)
reports <-
pcmh::import_pdf_data("U:/AR_reports/PCMH/Q32021_PCMH_2021_09072021_FINAL",
regexp = ".pdf")
stop("Everything works up to here")
detail <-
furrr::future_map_dfr(reports,
~ {
report <- .x
furrr::future_map_dfr(
1:nrow(crosswalk),
~ pcmh::generate_detail(report,
metric_data,
crosswalk[.,])
)
})
View(detail)
summary <-
furrr::future_map_dfr(detail$prvdr_num |>
unique(),
~ pcmh::generate_summary(detail, .))
out <-
list(Summary =
summary[which(summary$mismatch_typ != "Match"), ],
Detail =
detail[which(detail["mismatch_type"] %in% c("Missing", "Mismatch")), ])
out <-
list(Summary =
summary[which(summary$mismatch_typ != "Match"), ],
Detail =
detail[which(detail["mismatch_type"] != "Match", ])
out <-
list(Summary =
summary[which(summary$mismatch_typ != "Match"), ],
Detail =
detail[which(detail["mismatch_type"] != "Match"), ])
out[[2]]
out[[2]] |> view()
out[[2]] |> view
out[[2]] |> view()
summary[which(summary$mismatch_typ != "Match"), ]
summary[which(summary$mismatch_typ != "Match"), ]
summary[which(summary$mismatch_typ != "Match"), ]
summary[which(summary$mismatch_type != "Match"), ]
summary[which(summary["mismatch_type"] != "Match"), ]
detail[which(detail["mismatch_type"] != "Match"), ]
detail[which(detail["mismatch_type"] %in% c("Mismatch", "Missing")), ]
detail[which(detail$mismatch_type %in% c("Mismatch", "Missing")), ]
detail[which(detail["mismatch_type"] %in% c("Mismatch", "Missing")), ]
detail[which(detail$mismatch_type %in% c("Mismatch", "Missing")), ]
summary[which(summary$mismatch_ != "Match"), ]
summary[which(summary$mis != "Match"), ]
library(pcmh)
