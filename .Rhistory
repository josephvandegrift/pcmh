tictoc::toc()
View(crosswalk_21q3)
#' @return Returns an \code{nx8} \code{dataframe} for \code{n} number of variables
#'   extraced from a \code{PCMH} report.
#' @export
#'
#' @importFrom readr parse_character
#'
#' @examples
#' \dontrun{
#' qa_report(data_frame, clean_data, crosswalk)
#' }
generate_detail <-
function(.data_frame, .clean_data, .crosswalk) {
# Initialize parameters
params <-
.crosswalk
# Make sure variable is in lower case
params["variable"] <-
tolower(params["variable"])
# Initialize detail
detail <-
cbind(.data_frame[1, "prvdr_num"],
.crosswalk[c("page_name",
"metric",
"variable",
"page")])
# Extract metric
metric <-
.data_frame[.data_frame$page == params$page + 1 &
.data_frame$x > params$x_min &
.data_frame$x < params$x_max &
.data_frame$y > params$y_min &
.data_frame$y < params$y_max, "text"]
# Handle cases when nrow(metric) != 1
if (nrow(metric) == 0) {
detail["text"] <-
"Missing"
} else if (nrow(metric) > 1) {
detail["text"] <-
"More than 1 metric returned"
} else {
detail["text"] <-
metric["text"]
}
# Handle special cases
if (params$variable == "awc_pctl_group" &
detail["text"] == "A") {
params["variable"] <-
"awc_text"
} else if (params$variable == "edu_pctl_group" &
detail["text"] == "A") {
params["variable"] <-
"edu_text"
} else if (params$variable == "ahu_pctl_group" &
detail["text"] == "A") {
params["variable"] <-
"ahu_text"
}
# Extract expected value from clean_data
if (params$variable %in% names(.clean_data) == TRUE) {
detail["expected_value"] <-
as.character(.clean_data[which(.clean_data$reportid %in% .data_frame$prvdr_num),
params$variable])
} else {
detail["expected_value"] <-
"Variable not in data"
}
# Check for mismatch/missing
if (detail["expected_value"] == "Variable not in data") {
detail["mismatch_type"] <-
detail["expected_value"]
} else if (detail["text"] == "More than 1 metric returned") {
detail["mismatch_type"] <-
detail["text"]
} else if (detail["text"] == "Missing") {
detail["mismatch_type"] <-
detail["text"]
} else if (detail["text"] == "Medicaid") {
detail["mismatch_type"] <-
"Variable not captured"
} else if (detail["text"] %in% c("A", "G", "R", "Y")) {
detail["mismatch_type"] <-
ifelse(as.character(detail["text"]) ==
as.character(detail["expected_value"]),
"Match",
"Mismatch")
} else if (grepl("[[:digit:]]", detail["text"])) {
detail["mismatch_type"] <-
ifelse(
readr::parse_number(as.character(detail["text"])) ==
readr::parse_number(as.character(detail["expected_value"])),
"Match",
"Mismatch"
)
} else {
detail["mismatch_type"] <-
detail["text"]
}
# Construct output
out <-
detail
# Return out
return(out)
}
tictoc::tic()
detail_20q3 <-
map_dfr(reports_20q3,
~ {
report <- .x
map_dfr(1:nrow(crosswalk_20q3),
~ generate_detail(report,
data_20q3,
crosswalk_20q3[., ]))
})
tictoc::toc()
View(data_20q3)
View(detail_20q3)
detail_20q3 %>% group_by(mismatch_type) %>% summarise(n())
detail_20q3 %>% filter(is.na(mismatch_type))
data_20q3[is.na(data_20q3)]
data_20q3[is.na(data_20q3), ]
data_20q3[which(is.na(data_20q3)), ]
detail_20q3 %>% filter(is.na(mismatch_type))
detail_20q3 %>% filter(is.na(mismatch_type)) %>% select(prvdr_num, variable, text, expected_value)
data_20q3 %>% filter(reportid == 185250002)
data_20q3 %>% filter(reportid == 185250002) %>% select(attr_no_num)
tictoc::tic()
detail_21q3 <-
map_dfr(reports_21q3,
~ {
report <- .x
map_dfr(1:nrow(crosswalk_21q3),
~ generate_detail(report,
data_21q3,
crosswalk_21q3[., ]))
})
tictoc::toc()
View(detail_21q3)
crosswalk_21q3 <-
data_path %>%
pcmh::.read_metric_data(regexp = "\\/pcmh-crosswalk_21q2") %>%
filter(!is.na(variable),
!is.na(x),
!is.na(y))
crosswalk_21q3 <-
data_path %>%
pcmh::.read_metric_data(regexp = "\\/pcmh-crosswalk_21q2.csv") %>%
filter(!is.na(variable),
!is.na(x),
!is.na(y))
tictoc::tic()
detail_21q3 <-
map_dfr(reports_21q3,
~ {
report <- .x
map_dfr(1:nrow(crosswalk_21q3),
~ generate_detail(report,
data_21q3,
crosswalk_21q3[., ]))
})
tictoc::toc()
View(detail_21q3)
detail_21q3 %>% group_by(mismatch_type) %>% summarise(n)
detail_21q3 %>% group_by(mismatch_type) %>% summarise(n())
library(pcmh)
temp <-
data_path %>%
read_metric_data(regexp = "report_pcmh_2021q3_20")
temp %>% filter(reportid == 185250002) %>% select(ATTR_NO_NUM)
temp %>% filter(REPORTID == 185250002) %>% select(ATTR_NO_NUM)
problems(temp)
temp <- file.path(data_path, "report_pcmh_2021q3_20.csv")
temp <- file.path(data_path, "report_pcmh_2021q3_20.csv") %>% vroom::vroom(col_types = "c")
View(temp)
?vroom
temp <- file.path(data_path, "report_pcmh_2021q3_20.csv") %>% vroom::vroom(col_types = "ccccccccccc")
temp <- file.path(data_path, "report_pcmh_2021q3_20.csv") %>% vroom::vroom(col_types = "cccccccccccccccccccccccccccccccccccccccccccccccc")
problems(temp)
rep(c, 300)
rep("c", 300)
?rep
rep("c", each = 300)
rep("c", times = 300)
rep("c", times = 300, each = 300)
rep("c", times = 1, each = 300)
rep("c", each = 300, length.out = 300)
rep("c", each = 300, length.out = 1)
rep_len("c", 100)
strrep("c", 300)
temp <- file.path(data_path, "report_pcmh_2021q3_20.csv") %>% vroom::vroom(col_types = strrep("c", 300))
temp <- file.path(data_path, "report_pcmh_2021q3_20.csv") %>% vroom::vroom(col_types = c(.default = "c"))
clean_metric_data2 <- function(.df) {
# Initialize output
out <- .df
# Update column names to be lowercase
names(out) <-
names(out) |>
tolower()
# Replace flags with correct letter
out <-
lapply(out,
gsub,
pattern = "^Pass$|^1-10$",
replacement = "G") |>
lapply(gsub,
pattern = "^Fail$|^36\\+$",
replacement = "R") |>
lapply(gsub,
pattern = "^N<25$|^[.]$",
replacement = "A") |>
lapply(gsub,
pattern = "^11-35$",
replacement = "Y")
# Replace 1 and 0 with G and R only in flag columns
out[grepl("flag", names(out))] <-
lapply(out[grepl("flag", names(out))],
gsub,
pattern = "^1$",
replacement = "G")
out[grepl("flag", names(out))] <-
lapply(out[grepl("flag", names(out))],
gsub,
pattern = "^0$",
replacement = "R")
# Add comma format to numbers
# out[-c(1:9)] <-
#   lapply(
#     out[-c(1:9)],
#     prettyNum,
#     format = "s",
#     big.mark = ",",
#     preserve.width = "individual"
#   )
# Return output
return(as.data.frame(out))
}
temp %>% clean_metric_data2()
clean <- temp %>% clean_metric_data2()
tictoc::tic()
test_20 <-
map_dfr(reports_20q3,
~ {
report <- .x
map_dfr(1:nrow(crosswalk_20q3),
~ pcmh::generate_detail(report,
clean,
crosswalk_20q3[., ]))
})
tictoc::toc()
View(test_20)
test_20 %>% group_by(mismatch_type) %>% summarise(n())
generate_detail2 <-
function(.data_frame, .clean_data, .crosswalk) {
# Initialize parameters
params <-
.crosswalk
# Make sure variable is in lower case
params["variable"] <-
tolower(params["variable"])
# Initialize detail
detail <-
cbind(.data_frame[1, "prvdr_num"],
.crosswalk[c("page_name",
"metric",
"variable",
"page")])
# Extract metric
metric <-
.data_frame[.data_frame$page == params$page + 1 &
.data_frame$x > params$x_min &
.data_frame$x < params$x_max &
.data_frame$y > params$y_min &
.data_frame$y < params$y_max, "text"]
# Handle cases when nrow(metric) != 1
if (nrow(metric) == 0) {
detail["text"] <-
"Missing"
} else if (nrow(metric) > 1) {
detail["text"] <-
"More than 1 metric returned"
} else {
detail["text"] <-
metric["text"]
}
# Handle special cases
if (params$variable == "awc_pctl_group" &
detail["text"] == "A") {
params["variable"] <-
"awc_text"
} else if (params$variable == "edu_pctl_group" &
detail["text"] == "A") {
params["variable"] <-
"edu_text"
} else if (params$variable == "ahu_pctl_group" &
detail["text"] == "A") {
params["variable"] <-
"ahu_text"
}
# Extract expected value from clean_data
if (params$variable %in% names(.clean_data) == TRUE) {
detail["expected_value"] <-
as.character(.clean_data[which(.clean_data$reportid %in% .data_frame$prvdr_num),
params$variable])
} else {
detail["expected_value"] <-
"Variable not in data"
}
# Check for mismatch/missing
if (detail["expected_value"] == "Variable not in data") {
detail["mismatch_type"] <-
detail["expected_value"]
} else if (detail["text"] == "More than 1 metric returned") {
detail["mismatch_type"] <-
detail["text"]
} else if (detail["text"] == "Missing") {
detail["mismatch_type"] <-
detail["text"]
} else if (detail["text"] == "Medicaid") {
detail["mismatch_type"] <-
"Variable not captured"
} else if (detail["text"] %in% c("A", "G", "R", "Y")) {
detail["mismatch_type"] <-
ifelse(as.character(detail["text"]) ==
as.character(detail["expected_value"]),
"Match",
"Mismatch")
} else if (grepl("[[:digit:]]", detail["text"])) {
detail["mismatch_type"] <-
ifelse(
as.character(detail["text"]) ==
as.character(detail["expected_value"]),
"Match",
"Mismatch"
)
} else {
detail["mismatch_type"] <-
detail["text"]
}
# Construct output
out <-
detail
# Return out
return(out)
}
tictoc::tic()
test <-
map_dfr(reports_20q3,
~ {
report <- .x
map_dfr(1:nrow(crosswalk_20q3),
~ generate_detail2(report,
clean,
crosswalk_20q3[., ]))
})
tictoc::toc()
test %>% group_by(mismatch_type) %>% summarise(n())
?read.xlsx
fs::dir_ls(data_path, regexp = ".")
library(pcmh)
data_path %>%
pcmh::.read_metric_data(.regexp = "\\/pcmh-crosswalk_21q2.csv",
col_types = c(.default = "c"))
pcmh::.filter_pdf_data(reports_20q3[[1]], "2", "525", "557", "100", "300")
library(pcmh)
library(pcmh)
clean <- data_path %>%
pcmh::.read_metric_data(.regexp = "report_pcmh_2021q3_20",
col_types = c(.default = "c")) %>%
pcmh::.clean_metric_data()
clean <- data_path %>%
pcmh::.read_metric_data(.regexp = "report_pcmh_2021q3_20",
col_types = c(.default = "c")) %>%
pcmh::.clean_metric_data
clean <- data_path %>%
pcmh::.read_metric_data(.regexp = "report_pcmh_2021q3_20",
col_types = c(.default = "c")) %>%
pcmh::.clean_metric_data(.)
library(pcmh)
clean <- data_path %>%
pcmh::.read_metric_data(.regexp = "report_pcmh_2021q3_20",
col_types = c(.default = "c")) %>%
pcmh::.clean_metric_data(.)
tictoc::tic()
test_20 <-
map_dfr(reports_20q3,
~ {
report <- .x
map_dfr(1:nrow(crosswalk_20q3),
~ pcmh::generate_detail(report,
clean,
crosswalk_20q3[., ]))
})
tictoc::toc()
test_20 %>% group_by(mismatch_type) %>% summarise(n())
library(pcmh)
library(pcmh)
import_metric_data(data_path, .regexp = "report_pcmh_2021q3_20", col_types = c(.default = "c"))
data_path <-
"U:/AHCPII/Episodes of Care/Qrtly Reports/SAS team QA/Individual folders/Joseph/projects/pcmh_qa/data"
tictoc::tic()
ss_reports <-
pcmh::import_pdf_data("U:/AR_reports/PCMH/Q32021_PCMH_2020_09032021_SS",
regexp = ".pdf")
tictoc::toc()
future::plan(future::multisession)
tictoc::tic()
ss_reports <-
pcmh::import_pdf_data("U:/AR_reports/PCMH/Q32021_PCMH_2020_09032021_SS",
regexp = ".pdf")
tictoc::toc()
ss_data <-
data_path %>%
pcmh::.read_metric_data(.regexp = "\\/report_pool_2021_q3_20",
col_types = c(.default = "c")) %>%
pcmh::.clean_metric_data()
View(ss_data)
data_path %>%
pcmh::.read_metric_data(.regexp = "\\/report_pool_2021_q3_20",
col_types = c(.default = "c"))
data_path %>%
pcmh::.read_metric_data(.regexp = "report_pool_2021_q3_20",
col_types = c(.default = "c"))
ss_data <-
data_path %>%
pcmh::.read_metric_data(.regexp = "report_pool_2021q3_20",
col_types = c(.default = "c")) %>%
pcmh::.clean_metric_data()
View(ss_data)
pcmh20_crosswalk <-
data_path %>%
pcmh::.read_metric_data(.regexp = "\\/pcmh-crosswalk_20q3.csv",
col_types = c(.default = "c")) %>%
filter(!is.na(variable),
!is.na(x),
!is.na(y))
?read.xlsx
pcmh20_crosswalk <-
data_path %>%
pcmh::.read_metric_data(.regexp = "\\/pcmh-crosswalk_20q3",
col_types = c(.default = "c")) %>%
filter(!is.na(variable),
!is.na(x),
!is.na(y))
pcmh20_crosswalk <-
data_path %>%
pcmh::.read_metric_data(.regexp = "\\/pcmh-crosswalk_20q3") %>%
filter(!is.na(variable),
!is.na(x),
!is.na(y))
pcmh20_data <-
data_path %>%
pcmh::.read_metric_data(.regexp = "report_pool_2021q3_20",
col_types = c(.default = "c")) %>%
pcmh::.clean_metric_data()
tictoc::tic()
pcmh20_reports <-
pcmh::import_pdf_data("U:/AR_reports/PCMH/Q32021_PCMH_2020_09032021_SS",
regexp = ".pdf")
tictoc::toc()
warnings(ss_reports)
tictoc::tic()
pcmh20_reports <-
pcmh::import_pdf_data("U:/AR_reports/PCMH/Q32021_PCMH_2020_09022021",
regexp = ".pdf")
tictoc::toc()
tictoc::tic()
pcmh20_detail <-
map_dfr(pcmh20_reports,
~ {
report <- .x
map_dfr(1:nrow(pcmh20_crosswalk),
~ pcmh::generate_detail(report,
pcmh20_data,
pcmh20_crosswalk[., ]))
})
tictoc::toc()
View(pcmh20_detail)
View(pcmh20_crosswalk)
pcmh20_data <-
data_path %>%
pcmh::.read_metric_data(.regexp = "report_pcmh_2021q3_20",
col_types = c(.default = "c")) %>%
pcmh::.clean_metric_data()
tictoc::tic()
pcmh20_detail <-
map_dfr(pcmh20_reports,
~ {
report <- .x
map_dfr(1:nrow(pcmh20_crosswalk),
~ pcmh::generate_detail(report,
pcmh20_data,
pcmh20_crosswalk[., ]))
})
tictoc::toc()
View(pcmh20_detail)
tictoc::tic()
pcmh20_reports <-
pcmh::import_pdf_data("U:/AR_reports/PCMH/Q32021_PCMH_2020_09022021/Original",
regexp = ".pdf")
tictoc::toc()
tictoc::tic()
pcmh20_detail <-
map_dfr(pcmh20_reports,
~ {
report <- .x
map_dfr(1:nrow(pcmh20_crosswalk),
~ pcmh::generate_detail(report,
pcmh20_data,
pcmh20_crosswalk[., ]))
})
tictoc::toc()
